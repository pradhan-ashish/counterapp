{"version":3,"sources":["components/Counter.js","index.js","reducers/index.js"],"names":["Counter","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","incrementAsync","bind","assertThisInitialized","incrementIfOdd","value","onIncrement","setTimeout","_this$props","onDecrement","react_default","a","createElement","onClick","Component","store","createStore","state","arguments","length","undefined","type","rootEl","document","getElementById","render","ReactDOM","components_Counter","getState","dispatch","subscribe"],"mappings":"6NAoDeA,cAhDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,eAAiBP,EAAKO,eAAeC,KAApBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACtBA,EAAKU,eAAiBV,EAAKU,eAAeF,KAApBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAHLA,gFAObG,KAAKJ,MAAMY,MAAQ,IAAM,GAC3BR,KAAKJ,MAAMa,uDAKbC,WAAWV,KAAKJ,MAAMa,YAAa,sCAG5B,IAAAE,EACqCX,KAAKJ,MAAzCY,EADDG,EACCH,MAAOC,EADRE,EACQF,YAAaG,EADrBD,EACqBC,YAC5B,OACEC,EAAAC,EAAAC,cAAA,qBACYP,EADZ,SAEG,IACDK,EAAAC,EAAAC,cAAA,UAAQC,QAASP,GAAjB,KAGC,IACDI,EAAAC,EAAAC,cAAA,UAAQC,QAASJ,GAAjB,KAGC,IACDC,EAAAC,EAAAC,cAAA,UAAQC,QAAShB,KAAKO,gBAAtB,oBAGC,IACDM,EAAAC,EAAAC,cAAA,UAAQC,QAAShB,KAAKI,gBAAtB,2BAnCca,aCGhBC,EAAQC,YCNC,WAAuB,IAAtBC,EAAsBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAd,EACtB,QADoCA,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GACrBC,MACb,IAAK,YACH,OAAOJ,EAAQ,EACjB,IAAK,YACH,OAAOA,EAAQ,EACjB,QACE,OAAOA,KDAPK,EAASC,SAASC,eAAe,QAEjCC,EAAS,kBAAMC,IAASD,OAC5Bf,EAAAC,EAAAC,cAACe,EAAD,CACEtB,MAAOU,EAAMa,WACbtB,YAAa,kBAAMS,EAAMc,SAAS,CAAER,KAAM,eAC1CZ,YAAa,kBAAMM,EAAMc,SAAS,CAAER,KAAM,iBAE5CC,IAGFG,IACAV,EAAMe,UAAUL","file":"static/js/main.93eb7b04.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nclass Counter extends Component {\n  constructor(props) {\n    super(props);\n    this.incrementAsync = this.incrementAsync.bind(this);\n    this.incrementIfOdd = this.incrementIfOdd.bind(this);\n  }\n\n  incrementIfOdd() {\n    if (this.props.value % 2 !== 0) {\n      this.props.onIncrement()\n    }\n  }\n\n  incrementAsync() {\n    setTimeout(this.props.onIncrement, 1000)\n  }\n\n  render() {\n    const { value, onIncrement, onDecrement } = this.props\n    return (\n      <p>\n        Clicked: {value} times\n        {' '}\n        <button onClick={onIncrement}>\n          +\n        </button>\n        {' '}\n        <button onClick={onDecrement}>\n          -\n        </button>\n        {' '}\n        <button onClick={this.incrementIfOdd}>\n          Increment if odd\n        </button>\n        {' '}\n        <button onClick={this.incrementAsync}>\n          Increment async\n        </button>\n      </p>\n    )\n  }\n}\n\nCounter.propTypes = {\n  value: PropTypes.number.isRequired,\n  onIncrement: PropTypes.func.isRequired,\n  onDecrement: PropTypes.func.isRequired\n}\n\nexport default Counter\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createStore } from 'redux'\nimport Counter from './components/Counter'\nimport counter from './reducers'\n\nconst store = createStore(counter)\nconst rootEl = document.getElementById('root')\n\nconst render = () => ReactDOM.render(\n  <Counter\n    value={store.getState()}\n    onIncrement={() => store.dispatch({ type: 'INCREMENT' })}\n    onDecrement={() => store.dispatch({ type: 'DECREMENT' })}\n  />,\n  rootEl\n)\n\nrender()\nstore.subscribe(render)\n","export default (state = 0, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1\n    case 'DECREMENT':\n      return state - 1\n    default:\n      return state\n  }\n}\n"],"sourceRoot":""}